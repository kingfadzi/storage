events {}

http {
    server {
        listen 8000;
        server_name _;

        # Affine configuration
        location / {
            proxy_pass http://host.docker.internal:3010;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Fix path rewriting for backend-generated URLs
            proxy_redirect ~^(http://[^/]+)/affine/(.*)$ $1/$2;
        }

        location /analytics/ {
           proxy_pass http://host.docker.internal:8099/;  # Must keep trailing slash

           # Critical headers for Superset path awareness
           proxy_set_header Host $host;
           proxy_set_header X-Forwarded-Proto $scheme;
           proxy_set_header X-Script-Name /analytics;

           # Unified CORS configuration
           if ($request_method = OPTIONS) {
               add_header 'Access-Control-Allow-Origin' 'http://$host:$server_port' always;
               add_header 'Access-Control-Allow-Methods' '*' always;
               add_header 'Access-Control-Allow-Headers' '*' always;
               add_header 'Access-Control-Allow-Credentials' 'true' always;
               return 204;
           }

           add_header 'Access-Control-Allow-Origin' 'http://$host:$server_port' always;
           add_header 'Access-Control-Allow-Credentials' 'true' always;

           # Handle redirects internally
           proxy_redirect ~^(http://[^/]+)(/.*)$ http://$host:$server_port/analytics$2;
       }

       # Required for OAuth/SAML redirects
       error_page 301 302 307 = @handle_cors_redirects;
       location @handle_cors_redirects {
           proxy_pass $upstream_http_location;
           add_header 'Access-Control-Allow-Origin' 'http://$host:$server_port' always;
           add_header 'Access-Control-Allow-Credentials' 'true' always;
       }


    }
}
