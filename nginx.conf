events {}

http {
    server {
        listen 8000;
        server_name _;

        # Affine configuration
        location / {
            proxy_pass http://host.docker.internal:3010;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Superset unified configuration
        location /analytics/ {
            proxy_pass http://host.docker.internal:8099/;  # Critical trailing slash
            proxy_http_version 1.1;

            # Required headers for Superset
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Script-Name /analytics;

            # CORS configuration (dev environment)
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' 'http://$host:$server_port' always;
                add_header 'Access-Control-Allow-Methods' '*' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                return 204;
            }

            add_header 'Access-Control-Allow-Origin' 'http://$host:$server_port' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }

        # Handle redirects with CORS headers
        error_page 301 302 307 = @handle_redirects;
        location @handle_redirects {
            proxy_pass $upstream_http_location;
            add_header 'Access-Control-Allow-Origin' 'http://$host:$server_port' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }
    }
}
